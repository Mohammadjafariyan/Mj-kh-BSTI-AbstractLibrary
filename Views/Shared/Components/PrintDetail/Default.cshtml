@using System.Reflection
@using AbstractLibrary.FormBuilder
@using AbstractLibrary.ViewComponents
@using BigPardakht.Model
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.DependencyInjection
@model object
                @inject IServiceProvider  ServiceProvider



<style>
    .readonlyForm input{
    
    border: none;
    }
</style>
@{
    var propertyInfos = Model.GetType().GetProperties();

    propertyInfos = propertyInfos.OrderBy(o => o.PropertyType == typeof(bool)).ToArray();
}

<div class="row readonlyForm">
    @foreach (var prop in propertyInfos)
    {
        if (TempData.IsInHiddenList(prop.Name))
        {
            continue;
        }
        var attr = prop.CustomAttributes.FirstOrDefault();


        var val = prop.GetValue(Model);


        string translate = @MyGlobal.GetTranslate()[prop.Name];

        if (prop.Name == "Id")
        {
            @Html.Hidden("Id", val)
            continue;
        }

        if (prop.IsHasAttribute<HiddenAttribute>())
        {
            @Html.Hidden(prop.Name, val)
            continue;
        }


        if (prop.PropertyType == typeof(bool) ||
            prop.PropertyType == typeof(bool?))
        {
            <div class="col-md-6  @prop.Name form-group">

                @Html.Label(translate)
                @Html.Editor(prop.Name, prop.Name
                    , new
                    {
                        @class = "form-control",
                        @readonly="readonly"
                    })
            </div>
            continue;
        }


        if (attr == null)
        {
            <div class="col-md-6  @prop.Name">
                @Html.Editor(prop.Name, prop.Name
                    , new
                    {
                        @class = "form-control",
                        @readonly="readonly"
                    })
            </div>
            continue;
        }


        if (prop.IsHasAttribute<DontPrintAttribute>())
        {
            continue;
        }

        if (prop.IsHasAttribute<RichTextAttribute>())
        {
            <div class="col-md-6  @prop.Name">
                @Html.Hidden(prop.Name)
             @Html.TextArea(prop.Name, prop.Name
                                , new
                                {
                                    @class = "form-control",
                                    @readonly="readonly"
                                })
            </div>

            continue;
        }
        
        
        
        if (prop.IsHasAttribute<SelectByServiceAttribute>())
        {
            <div class="col-md-6  @prop.Name form-group">

                @{
                    var customAttribute = prop.GetCustomAttribute(typeof(SelectByServiceAttribute));

                    var selectByServiceAttribute = customAttribute as SelectByServiceAttribute;

                    if (selectByServiceAttribute == null)
                    {
                        throw new Exception("fileAttribute is null");
                    }
                    var service = ServiceProvider.GetService(selectByServiceAttribute.ServiceType) as ISelectListProvider;

                }
                

                @Html.Label(translate)

                @Html.DropDownList(prop.Name,service.GetSelectList(val), selectByServiceAttribute.SelectLabel,
                    new
                    {
                        @class="form-control",
                        @readonly="readonly"

                    })
            </div>

            continue;
        }
        
        if (prop.IsHasAttribute<ReadOnlyAttribute>())
        {
            <div class="col-md-6  @prop.Name">
                @Html.Label(translate)
                
                @Html.TextBox(prop.Name, (val ?? "") + "", new
                {
                    @class = "form-control",
                @readonly="readonly"
                })
            </div>
            continue;
        }
        if (prop.IsHasAttribute<TextAttribute>())
        {
            <div class="col-md-6  @prop.Name">
                @Html.Label(translate)
                @Html.TextBox(prop.Name, (val ?? "") + "", new
                {
                    @class = "form-control",
                    @readonly="readonly"

                })
            </div>
            continue;
        }


        if (prop.IsHasAttribute<TextAreaAttribute>())
        {
            <div class="col-md-6  @prop.Name">
                @Html.Label(translate)

                @Html.TextArea(prop.Name, (val ?? "") + "", new
                {
                    @class = "form-control",
                    @readonly="readonly"

                })
            </div>
            continue;
        }
        
        

        if (prop.IsHasAttribute<SelectColorAttribute>())
        {
            var customAttribute = prop.GetCustomAttribute(typeof(SelectColorAttribute));

            var fileAttribute = customAttribute as SelectColorAttribute;

            if (fileAttribute == null)
            {
                throw new Exception("fileAttribute is null");
            }
            
            
            <div class="col-md-6  @prop.Name form-group">
                @Html.Label(translate)
                <input type="color" class="form-control"
                       id="@prop.Name" name="@prop.Name" value="#ff0000" readonly="readonly">

            </div>
            

        }
        if (prop.IsHasAttribute<FileAttribute>())
        {
            var customAttribute = prop.GetCustomAttribute(typeof(FileAttribute));

            var fileAttribute = customAttribute as FileAttribute;

            if (fileAttribute == null)
            {
                throw new Exception("fileAttribute is null");
            }

            <div class="col-md-6  @prop.Name">
                <input
                    type="file" id="file"
                    name="@prop.Name" readonly="readonly"
                    accept="@fileAttribute.Accept"

                    @(fileAttribute.Multiple ? @"multiple=""multiple""" : "")
                    onchange="CheckSize(this)"/>

                <script>
                function FileListItems (files) {
                  var b = new ClipboardEvent("").clipboardData || new DataTransfer()
                  for (var i = 0, len = files.length; i<len; i++) b.items.add(files[i])
                  return b.files
                }
                
                function showErr(param,msg){
                    
                    $(param).parent().find("alert").remove();
                    
                    $(param).parent().append(`
                    
                    <div class="alert alert-warning">${msg}</div>`)
                    }

                function CheckSize(param) {
                         
                    
                    var alertSent=false;
                    var newFileList = Array.from(event.target.files);

                    
                    let arr=[];
                    for(let i = 0; i < newFileList.length; i++) {
                      if(newFileList[i].size > 2097152){
                          
                      if (!alertSent){
                          
                                                   showErr(param,'اندازه فایل بسیار بزرگ است بنابراین فایل های بزرگ اضافه نشد');
alertSent=true;
                          }

                      }else{
                          
                          if (i>5){
                              
                                                   showErr(param,'امکان انتخاب بیش از 5 فایل در یک زمان وجود ندارد');
                            break;
 }else{
                              arr.push(newFileList[i]);
                              }
                          }
                    }
                    
                    param.files=new FileListItems(arr);
                    
                  };
                </script>
            </div>
            continue;
        }


        if (prop.IsHasAttribute<SelectFileAttribute>())
        {
            
            continue;
        }
        if (prop.IsHasAttribute<SelectAttribute>())
        {
            <div class="col-md-6  @prop.Name form-group">

                @Html.Label(translate)

                @Html.DropDownList(prop.Name, ViewData[prop.Name] as SelectList, new
                {
                    @readonly="readonly"
                })
            </div>
            continue;
        }
    }




</div>